from key_derivation.bip32 import (
    derive_child_privkey,
    derive_master_privkey,
)

# Bytes versions of Test Vector 1 taken from https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
# Tests are of the form (parent, child)
child_test_vector_0 = (
    (b"\x04\x88\xad\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x87=\xff\x81\xc0/RV#\xfd\x1f\xe5\x16~\xac:U\xa0I\xde=1K\xb4.\xe2'\xff\xed7\xd5\x08\x00\xe8\xf3.r=\xec\xf4\x05\x1a\xef\xac\x8e,\x93\xc9\xc5\xb2\x1418\x17\xcd\xb0\x1a\x14\x94\xb9\x17\xc8Ck5", b'\x04\x88\xad\xe4\x014B\x19>\x80\x00\x00\x00G\xfd\xac\xbd\x0f\x10\x97\x04;x\xc6< \xc3N\xf4\xed\x9a\x11\x1d\x98\x00G\xad\x16(,z\xe6#aA\x00\xed\xb2\xe1O\x9e\xe7}&\xdd\x93\xb4\xec\xed\xe8\xd1n\xd4\x08\xce\x14\x9bl\xd8\x0b\x07\x15\xa2\xd9\x11\xa0\xaf\xea'),  # noqa: E501
    (b'\x04\x88\xad\xe4\x014B\x19>\x80\x00\x00\x00G\xfd\xac\xbd\x0f\x10\x97\x04;x\xc6< \xc3N\xf4\xed\x9a\x11\x1d\x98\x00G\xad\x16(,z\xe6#aA\x00\xed\xb2\xe1O\x9e\xe7}&\xdd\x93\xb4\xec\xed\xe8\xd1n\xd4\x08\xce\x14\x9bl\xd8\x0b\x07\x15\xa2\xd9\x11\xa0\xaf\xea', b'\x04\x88\xad\xe4\x02\\\x1b\xd6H\x00\x00\x00\x01*xWc\x13\x86\xba#\xda\xca\xc3A\x80\xdd\x19\x83sNDO\xdb\xf7t\x04\x15x\xe9\xb6\xad\xb3|\x19\x00<l\xb8\xd0\xf6\xa2d\xc9\x1e\xa8\xb5\x03\x0f\xad\xaa\x8eS\x8b\x02\x0f\n8t!\xa1-\xe91\x9d\xc93h'),  # noqa: E501
    (b'\x04\x88\xad\xe4\x02\\\x1b\xd6H\x00\x00\x00\x01*xWc\x13\x86\xba#\xda\xca\xc3A\x80\xdd\x19\x83sNDO\xdb\xf7t\x04\x15x\xe9\xb6\xad\xb3|\x19\x00<l\xb8\xd0\xf6\xa2d\xc9\x1e\xa8\xb5\x03\x0f\xad\xaa\x8eS\x8b\x02\x0f\n8t!\xa1-\xe91\x9d\xc93h', b'\x04\x88\xad\xe4\x03\xbe\xf5\xa2\xf9\x80\x00\x00\x02\x04Fk\x9c\xc8\xe1a\xe9f@\x9c\xa5)\x86\xc5\x84\xf0~\x9d\xc8\x1fs]\xb6\x83\xc3\xffn\xc7\xb1P?\x00\xcb\xce\rq\x9e\xcft1\xd8\x8ej\x89\xfa\x14\x83\xe0.5\t*\xf6\x0c\x04+\x1d\xf2\xffY\xfaBM\xca'),  # noqa: E501
    (b'\x04\x88\xad\xe4\x03\xbe\xf5\xa2\xf9\x80\x00\x00\x02\x04Fk\x9c\xc8\xe1a\xe9f@\x9c\xa5)\x86\xc5\x84\xf0~\x9d\xc8\x1fs]\xb6\x83\xc3\xffn\xc7\xb1P?\x00\xcb\xce\rq\x9e\xcft1\xd8\x8ej\x89\xfa\x14\x83\xe0.5\t*\xf6\x0c\x04+\x1d\xf2\xffY\xfaBM\xca', b'\x04\x88\xad\xe4\x04\xeez\xb9\x0c\x00\x00\x00\x02\xcf\xb7\x18\x83\xf0\x16v\xf5\x87\xd0#\xccS\xa3[\xc7\xf8\x8frK\x1f\x8c(\x92\xac\x12u\xac\x82*>\xdd\x00\x0fG\x92E\xfb\x19\xa3\x8a\x19T\xc5\xc7\xc0\xeb\xab/\x9b\xdf\xd9j\x17V>\xf2\x8ajK\x1a*vN\xf4'),  # noqa: E501
    (b'\x04\x88\xad\xe4\x04\xeez\xb9\x0c\x00\x00\x00\x02\xcf\xb7\x18\x83\xf0\x16v\xf5\x87\xd0#\xccS\xa3[\xc7\xf8\x8frK\x1f\x8c(\x92\xac\x12u\xac\x82*>\xdd\x00\x0fG\x92E\xfb\x19\xa3\x8a\x19T\xc5\xc7\xc0\xeb\xab/\x9b\xdf\xd9j\x17V>\xf2\x8ajK\x1a*vN\xf4', b'\x04\x88\xad\xe4\x05\xd8\x80\xd7\xd8;\x9a\xca\x00\xc7\x83\xe6{\x92\x1d+\xeb\x8fk8\x9c\xc6F\xd7&;AEp\x1d\xad\xd2\x16\x15H\xa8\xb0x\xe6^\x9e\x00G\x1bv\xe3\x89\xe5(\xd6\xdem\x81hW\xe0\x12\xc5EPQ\xca\xd6f\x08P\xe5\x83r\xa6\xc3\xe6\xe7\xc8')  # noqa: E501
)
master_test_vector_0 = (
    (bytes.fromhex('000102030405060708090a0b0c0d0e0f'), b"\x04\x88\xad\xe4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x87=\xff\x81\xc0/RV#\xfd\x1f\xe5\x16~\xac:U\xa0I\xde=1K\xb4.\xe2'\xff\xed7\xd5\x08\x00\xe8\xf3.r=\xec\xf4\x05\x1a\xef\xac\x8e,\x93\xc9\xc5\xb2\x1418\x17\xcd\xb0\x1a\x14\x94\xb9\x17\xc8Ck5"),  # noqa: E501
)


def decode_key_components(xprv: bytes):
    assert len(xprv) == 78
    assert xprv[0:4] == bytes.fromhex('0488ADE4')
    child_number = int.from_bytes(xprv[9:13], byteorder='big')
    c = xprv[13:13 + 32]
    k = int.from_bytes(xprv[13 + 33:], byteorder='big')
    return child_number, c, k


def test_derive_child_privkey():
    for test in child_test_vector_0:
        _, c_parent, k_parent = decode_key_components(test[0])
        child_number, c_child, k_child = decode_key_components(test[1])
        assert derive_child_privkey(k_par=k_parent, c_par=c_parent, i=child_number) == (k_child, c_child)


def test_derive_master_privkey():
    for test in master_test_vector_0:
        _, c_master, k_master = decode_key_components(test[1])
        assert derive_master_privkey(test[0]) == (k_master, c_master)
